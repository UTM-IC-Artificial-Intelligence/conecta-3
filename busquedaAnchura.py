# -*- coding: utf-8 -*-
"""ProyectoIAFinal

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BRrmjTPvmkKihvTwvNgsihZzt2OYcd1W

**Librerías**
"""

#Librerías
import numpy as  np   #Para manipular matrices.
import random
import time
import matplotlib.pyplot as plt

"""**Clases y Funciones**"""

def crearNivelNodo(Nodo, tablero, color):
  if tablero is None:
    return
  else:
    for i in np.arange(0, tablero.shape[1]):

      tab = np.array(tablero)
      tab = introducirFicha(tab, i, color)
      Nodo.agregarNodo(tab)

def crearTablero(numeroColumnas,numeroFilas):
  tableroInicial = np.zeros((numeroColumnas*numeroFilas))
  tableroInicial = tableroInicial.reshape(numeroFilas,numeroColumnas)
  return tableroInicial

def introducirFicha(tablero, columna, color):
  tabAux = tablero
  if(tablero[0][columna] != 0):
    return None
  else:
    for i in np.arange(0,tablero.shape[0]):
      if(i == 4):
        tabAux[i][columna] = color
        break
      elif(tablero[i+1][columna] != 0):
        tabAux[i][columna] = color
        break
  return tabAux

def crearNivel(Arbol, tablero, color):
  for i in np.arange(0, tablero.shape[1]):
    tab = np.array(tablero)
    tab = introducirFicha(tab, i, color)
    Arbol.agregar(tab)

def ganadorHorizontal(tablero):
  contadorConecta3 = 0
  for i in np.arange(tablero.shape[0]):
    linea = ""
    for j in np.arange(tablero.shape[1]):
      linea = linea + str(int(tablero[i][j]))
    if ("111" in linea) or ("222" in linea):
      print("Ganó en Horizontal")
      print(tablero)
      print('\n')
      return tablero
  return None

def ganadorVertical(tablero):
  contadorConecta3 = 0
  for i in np.arange(tablero.shape[1]):
    linea = ""
    for j in np.arange(tablero.shape[0]):
      linea = linea + str(int(tablero[j][i]))
    if ("111" in linea) or ("222" in linea):
      print("Ganó en vertical")
      print(tablero)
      print('\n')
      return tablero
  return None

def ganadorDiagonal(tablero):
  d1 = str(int(tablero[2][0]))+str(int(tablero[3][1]))+str(int(tablero[4][2]))
  if ("111" in d1) or ("222" in d1):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero
  
  d2 = str(int(tablero[1][0]))+str(int(tablero[2][1]))+str(int(tablero[3][2]))+str(int(tablero[4][3]))
  if ("111" in d2) or ("222" in d2):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero
    
  d3 = str(int(tablero[0][0]))+str(int(tablero[1][1]))+str(int(tablero[2][2]))+str(int(tablero[3][3]))+str(int(tablero[4][4]))
  if ("111" in d3) or ("222" in d3):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero
  
  d4 = str(int(tablero[0][1]))+str(int(tablero[1][2]))+str(int(tablero[2][3]))+str(int(tablero[3][4]))+str(int(tablero[4][5]))
  if ("111" in d4) or ("222" in d4):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero 

  d5 = str(int(tablero[0][2]))+str(int(tablero[1][3]))+str(int(tablero[2][4]))+str(int(tablero[3][5]))
  if ("111" in d5) or ("222" in d5):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero 

  d6 = str(int(tablero[0][3]))+str(int(tablero[1][4]))+str(int(tablero[2][5]))
  if ("111" in d6) or ("222" in d6):
    print("Ganó en diagonal")
    print(tablero)
    print('\n')
    return tablero

def hayGanador(tablero):
    if tablero is None:
      return None
    try: 
      if ((ganadorHorizontal(tablero)).any() != None) or ((ganadorVertical(tablero)).any() != None) or ((ganadorDiagonal(tablero)).any() != None):
        return tablero
      else:
        return None
    except:
      return None

def heuristicaHorizontal(tablero):
  if tablero is None:
    return 0
  contadorConecta2 = 0
  for i in np.arange(tablero.shape[0]):
    linea = ""
    for j in np.arange(tablero.shape[1]):
      linea = linea + str(int(tablero[i][j]))
    if ("11" in linea) or ("22" in linea):
      return 1 
  return 0

def heuristicaVertical(tablero):
  if tablero is None:
    return 0  
  contadorConecta2 = 0
  for i in np.arange(tablero.shape[1]):
    linea = ""
    for j in np.arange(tablero.shape[0]):
      linea = linea + str(int(tablero[j][i]))
    if ("11" in linea) or ("22" in linea):
      return 1
  return 0

def heuristicaDiagonal(tablero):
  if tablero is None:
    return 0  
  d1 = str(int(tablero[2][0]))+str(int(tablero[3][1]))+str(int(tablero[4][2]))
  if ("11" in d1) or ("22" in d1):
    return 1
  
  d2 = str(int(tablero[1][0]))+str(int(tablero[2][1]))+str(int(tablero[3][2]))+str(int(tablero[4][3]))
  if ("11" in d2) or ("22" in d2):
    return 1
    
  d3 = str(int(tablero[0][0]))+str(int(tablero[1][1]))+str(int(tablero[2][2]))+str(int(tablero[3][3]))+str(int(tablero[4][4]))
  if ("11" in d3) or ("22" in d3):
    return 1
  
  d4 = str(int(tablero[0][1]))+str(int(tablero[1][2]))+str(int(tablero[2][3]))+str(int(tablero[3][4]))+str(int(tablero[4][5]))
  if ("11" in d4) or ("22" in d4):
    return 1 

  d5 = str(int(tablero[0][2]))+str(int(tablero[1][3]))+str(int(tablero[2][4]))+str(int(tablero[3][5]))
  if ("11" in d5) or ("22" in d5):
    return 1 

  d6 = str(int(tablero[0][3]))+str(int(tablero[1][4]))+str(int(tablero[2][5]))
  if ("11" in d6) or ("22" in d6):
    return 1
  
  return 0

class Nodo: 
  def __init__(self, tablero):
    self.tablero = tablero
    self.n1 = None
    self.n2 = None
    self.n3 = None
    self.n4 = None
    self.n5 = None
    self.n6 = None
    self.heu = 0

  def __agregarNodo2__(self, nodo, tablero):
    if nodo.n1 is None:
      nodo.n1 = Nodo(tablero)
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n1.heu = 1
    elif nodo.n2 is None:
      nodo.n2 = Nodo(tablero)
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n2.heu = 1      
    elif nodo.n3 is None:
      nodo.n3 = Nodo(tablero)
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n3.heu = 1      
    elif nodo.n4 is None:
      nodo.n4 = Nodo(tablero)
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n4.heu = 1      
    elif nodo.n5 is None:
      nodo.n5 = Nodo(tablero)
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n5.heu = 1      
    elif nodo.n6 is None:
      nodo.n6 = Nodo(tablero)    
      if (heuristicaHorizontal(tablero)) or (heuristicaVertical(tablero)) or (heuristicaDiagonal(tablero)):
        nodo.n6.heu = 1      



  def __agregarNivelNodoss__(self, nodo, color):
    if nodo is None:
      return
    if nodo.n1 is None:
      crearNivelNodo(nodo, nodo.tablero, color)
      return
    else:
      self.__agregarNivelNodoss__(nodo.n1 ,color)
      self.__agregarNivelNodoss__(nodo.n2 ,color)
      self.__agregarNivelNodoss__(nodo.n3 ,color)
      self.__agregarNivelNodoss__(nodo.n4 ,color)
      self.__agregarNivelNodoss__(nodo.n5 ,color)
      self.__agregarNivelNodoss__(nodo.n6 ,color)
      return

#  def __busquedaProfundidadN__(self, nodo):
#    if (nodo is None) or (nodo.tablero is None) :
#      return                                  
#    else:
#      if nodo.n1 != None
    

  def __guardarHijos__(self, nodo, arregloNodos):
    if nodo.n1 != None:
      arregloNodos.append(nodo.n1)
    if nodo.n2 != None:
      arregloNodos.append(nodo.n2)
    if nodo.n3 != None:
      arregloNodos.append(nodo.n3)
    if nodo.n4 != None:
      arregloNodos.append(nodo.n4)
    if nodo.n5 != None:
      arregloNodos.append(nodo.n5)
    if nodo.n6 != None:
      arregloNodos.append(nodo.n6) 
    return   


  def __primeroMejor__(self, arregloNodos):
    for nodo in arregloNodos:
      try:
        if (hayGanador(nodo.tablero)).any() != None:
          return
      except: 
        None
    newArray = []
    for nodoI in arregloNodos:
      self.__guardarHijos__(nodoI, newArray)
    queue = []
    for nodoII in newArray:
      if nodoII.heu == 1:
        queue.append(nodoII)
    if queue == []:
      queue = newArray
    if(queue == []):
      return
    else:
      self.__primeroMejor__(queue)
      
  
  def __hillClimbing__(self, arregloNodos):
    for nodo in arregloNodos:
      try:
        if (hayGanador(nodo.tablero)).any() != None:
          return
      except: 
        None
    newArray = []
    for nodoI in arregloNodos:
      self.__guardarHijos__(nodoI, newArray)
    queue = []
    for nodoII in newArray:
      if nodoII.heu == 1:
        queue.append(nodoII)
    if queue == []:
      queue = newArray
    if(queue == []):
      return
    else:
      nodos = []
      tiempos = []
      for nodo in queue:
        inicio = time.time()
        self.__hillClimbing__([nodo])
        fin = time.time()
        nodos.append(nodo)
        tiempos.append((inicio-fin))
      nodos = np.array(nodos)
      tiempos = np.tiempos(tiempos)
      hayGanador(nodos[argmin(tiempos)])
  
    

  def __busquedaAnchura__(self, arregloNodos):
    newArray = []
    for nodoI in arregloNodos:
      self.__guardarHijos__(nodoI, newArray)
    for nodoII in newArray:
      try:
        if (hayGanador(nodoII.tablero)).any() != None:
          return
      except:
        None
    if(newArray == []):
      return
    else:
      self.__busquedaAnchura__(newArray)



  def agregarNodo(self, tablero):
    self.__agregarNodo2__(self, tablero)   
  
  def agregarNivelNodos(self, color):
    self.__agregarNivelNodoss__(self, color)
  
  def busquedaProfundidadN(self):
    self.__busquedaProfundidadN__(self)

  def busquedaAnchura(self):
    arregloNodo = []
    arregloNodo.append(self)
    self.__busquedaAnchura__(arregloNodo)

#  def __busquedaProfundidadN__(self, nodo):
    
#    if nodo.n1 != None:
#      if hayGanador(nodo.n1.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n1)
#      else:
#        exit()        

#    if nodo.n2 != None:
#      if hayGanador(nodo.n2.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n2)
#      else:
#        exit()      

#    if nodo.n3 != None:
#      if hayGanador(nodo.n3.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n3)    
#      else:
#        exit()

#    if nodo.n4 != None:
#      if hayGanador(nodo.n4.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n4) 
#      else:
#        exit()   

#    if nodo.n5 != None:
#      if hayGanador(nodo.n5.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n5)     
#      else:
#        exit()       

#    if nodo.n6 != None:
#      if hayGanador(nodo.n6.tablero) is None:
#        self.__busquedaProfundidadN__(nodo.n6)   
#      else:
#        exit()

class Arbol:
  def __init__(self, tablero):
    self.raiz = Nodo(tablero)
  
  def __agregarNodo__(self, nodo, tablero):
    if nodo.n1 is None:
      nodo.n1 = Nodo(tablero)
    elif nodo.n2 is None:
      nodo.n2 = Nodo(tablero)
    elif nodo.n3 is None:
      nodo.n3 = Nodo(tablero)
    elif nodo.n4 is None:
      nodo.n4 = Nodo(tablero)
    elif nodo.n5 is None:
      nodo.n5 = Nodo(tablero)
    elif nodo.n6 is None:
      nodo.n6 = Nodo(tablero)        

  def agregar(self, tablero):
    self.__agregarNodo__(self.raiz, tablero)

"""**Cuerpo de la matriz**"""

#Casilla vacía    -> 0
#Casilla roja     -> 1
#Casilla amarilla -> 2


#Creación de la raíz
profundidad = 7

iter = 0
registroTiempos = []
xtiempo = []


numeroColumnas = 6
numeroFilas    = 5



start = time.time()
arbol = Arbol(crearTablero(numeroColumnas,numeroFilas))
stop = time.time()
iter = iter+1
xtiempo.append(iter)
registroTiempos.append((stop-start))


#Creación del primer nivel
start = time.time()
crearNivel(arbol, arbol.raiz.tablero, 1)
stop = time.time()
iter = iter+1
xtiempo.append(iter)
registroTiempos.append((stop-start))


flag = 1
for i in np.arange((profundidad-2)):
  start = time.time()
  if(flag == 1):
    flag = 2
  elif(flag == 2):
    flag = 1

  newTree = arbol.raiz
  for i in np.arange(numeroColumnas):
    varString = "treeTmp = newTree.n"+str(i+1)
    exec(varString)
    treeTmp.agregarNivelNodos(flag)
  stop = time.time()
  iter = iter+1
  xtiempo.append(iter)
  registroTiempos.append((stop-start))

for tiempo in registroTiempos:
  print(tiempo)

aTiempos = np.array(registroTiempos)
aTiempos.shape

axTiempos = np.array(xtiempo)
axTiempos.shape

print(axTiempos)

# Crear la figura y los ejes
fig, ax = plt.subplots()
#xcolabora Dibujar puntos
ax.scatter(x =axTiempos , y =  aTiempos)
# Guardar el gráfico en formato png
plt.savefig('diagrama-dispersion.png')
# Mostrar el gráfico
plt.show()

"""import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.scatter(xtiempo, registroTiempos)



"""

a = Nodo

inicio = []
inicio.append(arbol.raiz)

a.__busquedaAnchura__(arbol.raiz, inicio)